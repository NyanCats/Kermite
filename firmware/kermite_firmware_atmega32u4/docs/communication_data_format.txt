[[ 通信データフォーマット ]]

ホスト-デバイス間でのGenericHIDによる通信データのフォーマット

・1フレームは64バイト, 送信するデータが64バイト以下の場合は後ろを0で埋める
・2バイトの数値はリトルエンディアンで送る


[凡例]
XX YY ZZ WW ... : 16進数のバイト列
  00~FFは16進数の固定値, GG~ZZは任意の値とする
0b_AAAA_BBBB: 1バイトデータのビット単位の表記
0b_AAAA_BBBB_CCCC_DDDD: 2バイトデータのビット単位の表記


[パケット]


Host --> Device
memory write transaction start
  B0 TT 10
    B0: category, memory operation
    TT: data kind
      01 for keymapping data
    10: command, write transaction start

Host --> Device
memory writing operation
  B0 TT 20 AA AA LL DD DD ...
    B0: category, memory operation
    TT: data kind
      01 for keymapping data
    20: command, write request
    AA AA: address
    LL: data length
    DD DD ...: data

Host --> Device
memory checksum request operation
  B0 TT 21 AA AA LL LL
    B0: category, memory operation
    TT: data kind
    21: command, checksum request
    AA AA: address
    LL LL: data length

Host <-- Device
memory checksum response
  B0 TT 22 RR
    B0: category, memory operation
    TT: data kind
    22: command, checksum response
    SS: checksum value

Host --> Device
memory write transaction done
  B0 TT 11
    B0: category, memory operation
    TT: data kind
      01 for keymapping data
    11: command, write transaction done





Host <-- Device
realtime key state event
  E0 90 KK YY
    E0: category, realtime event
    90: command, keystate changed 
    KK: keyIndex
    YY: isDown, 1 for down, 0 for up

Host <-- Device
realtime layer state event
  E0 91 LL
    E0: category, realtime event
    91: command, layer changed
    LL: layerIndex

Host --> Device
device attributes request
  F0 10
    F0: category, general
    10: command, device attributes request

Host <-- Device
device attributes response
  F0 11 KK SS
    F0: category, general
    11: command device attributes response
    KK: number of keys
    SS: keyboard side (0:unset, 1:left, 2:right)

(未実装)
Host --> Device
set keyboard side configuration
  F0 20 SS
    SS: keyboard side (0:unset, 1:left, 2:right)



DEPRECATED```

[Common Framing Layer]

◆oneliner data message
  概要: 単一のデータパケットを送信
  データサイズ: 64バイト未満
  
  ◆oneliner single data
    E0 00 LL QQ QQ ...
    LL: length of data bytes
    QQ QQ ...: data bytes
  
  ◆oneliner multiple data
    E1 ...
    1フレームで複数データを送信, 必要なら追加


◆general framed message
  概要: 複数のフレームからなるデータを送信
  合計データサイズ: 64バイト以上

  ◆start of frame
    F0 NN LL LL HH HH ... 00 00 ...
    NN: number of frames
    LL LL: length of whole data bytes
    HH HH ...: (optional) application frame header
    00 00 ...: padding

  ◆frame body
    F1 KK LL QQ QQ ... 00 00 ...
    KK: frame index
    LL: length of data bytes in this frame
    QQ QQ ...: data bytes
    00 00 ...: padding (if need)

  start of frameに続けて必要な数のframe bodyを送り、大きいサイズのデータを伝達する


[Application Layer]

◆realtime keystate message
  種別: リアルタイムキー状態
  方向: Host <-- Device
  詳細: キーが押されたとき/離されたときにデバイスからホストにキーIDを送信する
  
  ◆keyEvent
    E0 00 03 90 KK YY ...
    90: opcode, keyevent
    KK: keyIndex
    YY: isDown, 1 for down, 0 for up

◆keyassign writing operation
  種別: キーマッピング書き込み
  方向: Host --> Device
  詳細: デバイスのストレージに書き込むキーマッピングデータを送信する
  
  ◆write keyAssigns
    ◆start of frame
      F0 NN LL LL A0 SS 00 ...
      A0: opcode, write keyAssigns
      SS: checksum
  
    ◆frame body
      F1 KK LL QQ QQ ... 00 00 ...
      QQ QQ ...: partial data, 0~62bytes

    デバイス側では受け取ったデータをストレージに書き込む

◆keyassign writing operation result
  種別: キーマッピング書き込みの結果を通知
  方向: Host <-- Device
  詳細: キー配列書き込みが成功したかどうかをホストに通知
  
  ◆result
    E0 00 02 A8 RR ...
    A8: opcode, result for keyassign write
    RR: 1 for success, 0 for failure 

    
```

[[ キーマッピングデータ形式 ]]

EEPROMに格納されるキーマッピングのデータフォーマット, for dominant

data for eeprom, max1024bytes
header 24bytes
  ZZ ZZ SS QQ RR PP KK NN WW ...
    [0] ZZ ZZ: magic number, 0xfe02
    [2] SS: reserved, 0xff
    [3] QQ: logic model type
      0x01 for dominant
      0x02 for afterfire (reserved)
      0x04 ...
    [4] RR: format revision, increment when format changed
    [5] PP: assign data start location, 24
    [6] KK: numKeys
    [7] NN: numLayers, 2~15
    [8] WW: useDualAssign, 0 or 1
    [9~23]: padding 15bytes, 0

assignData max1000bytes
  2バイトの値でキーに対するアサインを表す
  以下のアドレスでアサインを配置する番地(wordIndex)を算出
    for single assing mode
      wordIndex = (layerIndex * numKeys + keyIndex)
    for dual assign mode
      wordIndex = (numLayers * numKeys) * slotIndex + (layerIndex * numKeys + keyIndex)
  メモリ全体を16bit値の配列とみなして、wordIndexにアサインを配置
    キー入力
      0b_10TT_MMMM_KKKK_KKKK
        TT: trigger
          01: keydown
          10: keytap
          11: keyhold
        MMMM: modifier
          [OS, Alt, Shift, Ctrl] for [MSB...LSB]
        KKKK_KKKK: keycode
          LogicalKeyCodes.hを参照
    レイヤ呼び出し
      0b_11TT_0PPP_xxxx_LLLL
        TT: trigger
          01: keydown
          10: keytap
          11: keyhold
        PPP: operation
          001: hold layer
          010: oneshot layer
          011: set modal layer
          100: toggle modal layer
          101: clear modal layer
        LLLL: target layer
          1~14